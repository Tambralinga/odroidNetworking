diff --git a/rxe/rxe_verbs.c b/rxe/rxe_verbs.c
index 24bb889..60e5cc1 100644
--- a/drivers/infiniband/hw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/hw/rxe/rxe_verbs.c
@@ -1561,37 +1561,35 @@ err1:
 	return err;
 }
 
-static ssize_t rxe_show_skb_num(struct device *device,
-				struct device_attribute *attr, char *buf)
+static ssize_t rxe_show_skb_num(struct class_device *device, char *buf)
 {
 	struct rxe_dev *rxe = container_of(device, struct rxe_dev,
-					   ib_dev.dev);
+					   ib_dev.class_dev);
 
 	return sprintf(buf, "req_in:%d resp_in:%d req_out:%d resp_out:%d\n",
-		atomic_read(&rxe->req_skb_in),
-		atomic_read(&rxe->resp_skb_in),
-		atomic_read(&rxe->req_skb_out),
-		atomic_read(&rxe->resp_skb_out));
+		       atomic_read(&rxe->req_skb_in),
+		       atomic_read(&rxe->resp_skb_in),
+		       atomic_read(&rxe->req_skb_out),
+		       atomic_read(&rxe->resp_skb_out));
 }
 
-static DEVICE_ATTR(skb_num, S_IRUGO, rxe_show_skb_num, NULL);
+static CLASS_DEVICE_ATTR(skb_num, S_IRUGO, rxe_show_skb_num, NULL);
 
-static ssize_t rxe_show_parent(struct device *device,
-			       struct device_attribute *attr, char *buf)
+static ssize_t rxe_show_parent(struct class_device *device, char *buf)
 {
 	struct rxe_dev *rxe = container_of(device, struct rxe_dev,
-					   ib_dev.dev);
+					  ib_dev.class_dev);
 	char *name;
 
 	name = rxe->ifc_ops->parent_name(rxe, 1);
 	return snprintf(buf, 16, "%s\n", name);
 }
 
-static DEVICE_ATTR(parent, S_IRUGO, rxe_show_parent, NULL);
+static CLASS_DEVICE_ATTR(parent, S_IRUGO, rxe_show_parent, NULL);
 
-static struct device_attribute *rxe_dev_attributes[] = {
-	&dev_attr_skb_num,
-	&dev_attr_parent,
+static struct class_device_attribute *rxe_dev_attributes[] = {
+	&class_device_attr_skb_num,
+	&class_device_attr_parent,
 };
 
 int rxe_register_device(struct rxe_dev *rxe)
@@ -1723,7 +1721,8 @@ int rxe_register_device(struct rxe_dev *rxe)
 	}
 
 	for (i = 0; i < ARRAY_SIZE(rxe_dev_attributes); ++i) {
-		err = device_create_file(&dev->dev, rxe_dev_attributes[i]);
+		err = class_device_create_file(&dev->class_dev,
+					       rxe_dev_attributes[i]);
 		if (err) {
 			rxe_error(rxe,
 				  "device_create_file failed, "
@@ -1747,7 +1746,8 @@ int rxe_unregister_device(struct rxe_dev *rxe)
 	struct ib_device *dev = &rxe->ib_dev;
 
 	for (i = 0; i < ARRAY_SIZE(rxe_dev_attributes); ++i)
-		device_remove_file(&dev->dev, rxe_dev_attributes[i]);
+		class_device_remove_file(&dev->class_dev,
+					 rxe_dev_attributes[i]);
 
 	ib_unregister_device(dev);
 
diff --git a/rxe/rxe_net.c b/rxe/rxe_net.c
index cd4ead8..a775d45 100644
--- a/drivers/infiniband/hw/rxe/rxe_net.c
+++ b/drivers/infiniband/hw/rxe/rxe_net.c
@@ -50,12 +50,6 @@ MODULE_LICENSE("Dual BSD/GPL");
 static int rxe_eth_proto_id = ETH_P_RXE;
 module_param_named(eth_proto_id, rxe_eth_proto_id, int, 0644);
 MODULE_PARM_DESC(eth_proto_id, "Ethernet protocol ID (default/correct=0x8915)");
-
-static int rxe_xmit_shortcut;
-module_param_named(xmit_shortcut, rxe_xmit_shortcut, int, 0644);
-MODULE_PARM_DESC(xmit_shortcut,
-		 "Shortcut transmit (EXPERIMENTAL)");
-
 static int rxe_loopback_mad_grh_fix = 1;
 module_param_named(loopback_mad_grh_fix, rxe_loopback_mad_grh_fix, int, 0644);
 MODULE_PARM_DESC(loopback_mad_grh_fix, "Allow MADs to self without GRH");
@@ -111,7 +105,7 @@ static struct device *dma_device(struct rxe_dev *rxe)
 	if (ndev->priv_flags & IFF_802_1Q_VLAN)
 		ndev = vlan_dev_real_dev(ndev);
 
-	return ndev->dev.parent;
+	return ndev->class_dev.dev;
 }
 
 static int mcast_add(struct rxe_dev *rxe, union ib_gid *mgid)
@@ -138,25 +132,13 @@ static int mcast_delete(struct rxe_dev *rxe, union ib_gid *mgid)
 
 static inline int queue_deactivated(struct sk_buff *skb)
 {
-	const struct net_device_ops *ops = skb->dev->netdev_ops;
-	u16 queue_index = 0;
-	struct netdev_queue *txq;
-
-	if (ops->ndo_select_queue)
-		queue_index = ops->ndo_select_queue(skb->dev, skb);
-	else if (skb->dev->real_num_tx_queues > 1)
-		queue_index = skb_tx_hash(skb->dev, skb);
-
-	txq = netdev_get_tx_queue(skb->dev, queue_index);
-	return txq->qdisc->state & 2;
+	/* no netdevice_ops in el5.4 */
+	return 0;
 }
 
 static int send_finish(struct sk_buff *skb)
 {
-	if (!rxe_xmit_shortcut)
-		return dev_queue_xmit(skb);
-	else
-		return skb->dev->netdev_ops->ndo_start_xmit(skb, skb->dev);
+	return dev_queue_xmit(skb);
 }
 
 static int send(struct rxe_dev *rxe, struct sk_buff *skb)
